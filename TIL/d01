디자인 패턴
  생성
    빌더
    - Builder 생성 단계를 캡슐화하여 구축 공정을 동일하게
    프로토타입
    - Prototype 기존 객체를 복제해서 새 객체를 생성 가능
    팩토리메서드
    - Factory Method 상위 클래스에서 객체 생성 인터페이스 정의, 하위 생성
    추상 팩토리
    - Abstract Factory 생성군을 하나로 모아두고, 팩토리 중에 선택
    싱글턴
    - Singleton 유일한 하나의 인스턴스를 보장하는 패턴
  구조
    브릿지
    - Bridge 추상과 구현을 분리해서 결합도를 낮춘 패턴
    데코레이터 
    - Decorator 소스를 변경하지 않고 기능을 확장하는 패턴
    퍼사드
    - Facade 하나의 인터페이스를 통해 느슨한 결합 제공
    플라이웨이트
    - Flyweight 대량의 작은 객체들을 공유하는 패턴
    프록시
    - Proxy 대리인이 대신 그 일을 처리하는 패턴. 실체 객체를 호출하면 중간에 가로채서 다른 동작을 수행
    컴포지트
    - Composite 개별 객체와 복합 객체를 클라이언트에서 동일사용
    어탭터
    - Adapter 인터페이스 때문에 사용 못하는 클래스를 함께 사용
  행위
    인터프리터
    - Interpreter 언어 규칙 클래스를 이용하는 패턴
    템플릿메서드
    - Template Method 알고리즘 골격의 구조를 정의한 패턴
    책임의 고리
    - Chain of Resopnsibility 객체끼리 연결 고리를 만들어 내부적으로 전달하는 패턴
    커맨드
    - Command 요청 자체를 캡슐화해 파라미터로 넘기는 패턴
    이터레이터
    - Iterator 내부 표현은 보여주지 않고 순회하는 패턴
    미디에이터
    - Mediator 객체 간 상화작용을 캡슐화한 패턴
    메멘토
    - Memento 상태 값을 미리 저장해두었다가 복구하는 패턴
    옵저버
    - Observer 상태가 변할 때 의존자에게 알리고 자동 업데이트
    스테이트  
    - State 객체 내부 상태에 따라서 행위를 변경하는 패턴
    스트레티지
    - Strategy 여러 알고리즘을 캡슐화해 대체가 가능하게 함
    비지터
    - Visitor 오퍼레이션을 별도의 클래스에 새롭게 정의한 패턴

      
